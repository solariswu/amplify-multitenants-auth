const aws = require('aws-sdk');
const BENEFITADMIN = 'benefitflowAdmin';
const TENANTADMIN = 'clientAdmin';
const TRIAL = 'trial';
const USERSAPI_PATH = '/users';
const AUTOGENERATED_GROUP = 'Autogenerated group';

const region = process.env.AWS_REGION;
const UserPoolId = process.env.USERPOOL_ID;
const CognitoIdentityServiceProvider = aws.CognitoIdentityServiceProvider;
const client = new CognitoIdentityServiceProvider({
    apiVersion: '2016-04-19',
    region
});

const headers = {
    'Access-Control-Allow-Headers':
        'Content-Type,X-Amz-Date,Authorization,X-Api-Key',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'OPTIONS,POST,GET,DELETE'
};

const response = (statusCode = 200, body) => {
    return {
        statusCode,
        headers,
        body
    };
};

const responseErrorInfo = (err) => {
    return {
        statusCode: err.statusCode,
        header,
        body: JSON.stringify({message: err.code})
    };
};

const PERMISSION_DENY = {
    statusCode: 403,
    headers,
    body: JSON.stringify({message: 'Permission Deny'})
};

const INVAID_PARAMS = {
    statusCode: 400,
    headers,
    body: JSON.stringify({message: 'Invalid Input Parameters'})
};

const isInputValid = (payload) => {
    console.log('createUser received payload:', payload);
    return (
        payload &&
        payload.tenantid &&
        payload.email &&
        payload.tenantid.trim().length &&
        payload.email.trim().length
    );
};

const retrieveRequesterGroup = (requestContext) => {
    const groups = [];
    if (
        requestContext &&
        requestContext.authorizer &&
        requestContext.authorizer.claims &&
        requestContext.authorizer.claims['cognito:groups']
    ) {
        const claims = requestContext.authorizer.claims;
        let groupsArray = claims['cognito:groups'].split(',');
        groupsArray.map((x) => groups.push(x));
    }

    console.log('requester groups:', groups);
    return groups;
};

const getAllUsers = async (tenantId = null) => {
    const users = [];

    let listUsersParams = {
        UserPoolId,
        Limit: 60
    };

    do {
        try {
            let listUsersResult = null;
            if (tenantId) {
                listUsersParams.GroupName = tenantId;
                console.log('listUsersParams:', listUsersParams);
                listUsersResult = await client
                    .listUsersInGroup(listUsersParams)
                    .promise();
                listUsersParams.NextToken = listUsersResult.NextToken;
            } else {
                console.log('listUsersParams:', listUsersParams);
                listUsersResult = await client
                    .listUsers(listUsersParams)
                    .promise();
                listUsersParams.PaginationToken =
                    listUsersResult.PaginationToken;
            }
            console.log('listUsersResult:', listUsersResult);
            if (listUsersResult && listUsersResult.Users) {
                users.push(...listUsersResult.Users);
            }
        } catch (err) {
            console.error('List Users failed with:', err);
            console.error('RequestId: ' + err.requestId);
            return responseErrorInfo(err);
        }
    } while (listUsersParams.NextToken || listUsersParams.PaginationToken);

    return response(200, JSON.stringify({Users: users}));
};

const getUser = async (Username, requesterTenantId = null) => {
    const users = [];
    let getUserParams = {
        UserPoolId,
        Filter: 'username="' + Username + '"',
        Limit: 60
    };

    try {
        const getUserResult = await client.listUsers(getUserParams).promise();

        await Promise.all(
            getUserResult.Users.map(async (user) => {
                const getUserGroupsParams = {
                    UserPoolId,
                    Username: user.Username
                };

                const getUserGroupResult = await client
                    .adminListGroupsForUser(getUserGroupsParams)
                    .promise();

                user.Groups = getUserGroupResult.Groups.filter(
                    (group) => !group.GroupName.startsWith(AUTOGENERATED_GROUP)
                );

                if (
                    user.Groups.find(
                        (group) => group.GroupName === requesterTenantId
                    )
                ) {
                    users.push(user);
                }
            })
        );
    } catch (err) {
        console.error('Get User failed with:', err);
        console.error('RequestId: ' + err.requestId);
        return responseErrorInfo(err);
    }

    return response(200, JSON.stringify({Users: users}));
};

const createUser = async (
    Username,
    requesterTenantId = null,
    payload = null
) => {
    let UserEmail = null;

    if (!isInputValid(payload)) {
        return INVAID_PARAMS;
    }

    // Benefit Admin create user, needs tenant id info
    if (!payload.tenantid && !tenantId) {
        return response(400, 'Need tenant id in payload');
    }

    // requester tenant id equals
    if (
        requesterTenantId &&
        payload.tenantid &&
        requesterTenantId !== payload.tenantid
    ) {
        return PERMISSION_DENY;
    }

    if (payload.email) {
        UserEmail = payload.email;
    }

    const createUserParams = {
        UserPoolId,
        Username,
        UserAttributes: [
            {
                Name: 'email',
                Value: UserEmail
            }
        ]
    };

    let message = '';

    try {
        await client.adminCreateUser(createUserParams).promise();
        console.log(`adminCreateUser ${Username} success`);
        message += `User ${Username} created. `;
    } catch (err) {
        console.log('adminCreateUser error:', err);
        console.log('RequestId: ' + this.requestId);
        return responseErrorInfo(err);
    }

    try {
        const adminAddUerToGroupParams = {
            GroupName: requesterTenantId ? requesterTenantId : payload.tenantid,
            UserPoolId,
            Username
        };

        await client.adminAddUserToGroup(adminAddUerToGroupParams).promise();

        console.log(
            `Add user ${Username} to tenant ${
                requesterTenantId ? requesterTenantId : payload.tenantid
            } success`
        );
        message += `Added user to Tenant ${
            requesterTenantId ? requesterTenantId : payload.tenantid
        }. `;
    } catch (err) {
        console.log('Add user to tenant error:', err);
        console.log('RequestId: ' + this.requestId);
        return response(
            err.statusCode,
            JSON.stringify({
                message: `${message} but got ${err.code} on add user to tenant`
            })
        );
    }

    //add tenant if required
    if (payload.isadmin && payload.tenantid !== BENEFITADMIN) {
        const createAdminParams = {
            GroupName: TENANTADMIN,
            UserPoolId,
            Username
        };

        try {
            await client.adminAddUserToGroup(createAdminParams).promise();

            console.log(
                `Assign tenant ${
                    requesterTenantId ? requesterTenantId : payload.tenantid
                } admin role to user success`
            );
            message += `Assign tenant ${
                requesterTenantId ? requesterTenantId : payload.tenantid
            } admin role to user success`;
            console.log('RequestId: ' + this.requestId);
        } catch (err) {
            console.log('Assign tenant admin role to user error:', err);
            console.log('RequestId: ' + this.requestId);
            return response(
                err.statusCode,
                JSON.stringify({
                    message: `${message} but got ${err.code} on assigning user to tenant admin`
                })
            );
        }
    }

    //add tenant if required
    if (payload.istrial) {
        const createTrialParams = {
            GroupName: TRIAL,
            UserPoolId,
            Username
        };

        try {
            await client.adminAddUserToGroup(createTrialParams).promise();

            console.log(
                `Assign tenant ${
                    requesterTenantId ? requesterTenantId : payload.tenantid
                } trial role to user success`
            );
            message += `Assign tenant ${
                requesterTenantId ? requesterTenantId : payload.tenantid
            } trial role to user success`;
            console.log('RequestId: ' + this.requestId);
        } catch (err) {
            console.log('Assign trial role to user error:', err);
            console.log('RequestId: ' + this.requestId);
            return response(
                err.statusCode,
                JSON.stringify({
                    message: `${message} but got ${err.code} on assigning user to trial`
                })
            );
        }
    }

    return response(200, JSON.stringify({message: `${message}`}));
};

const getUserGroups = async (Username) => {
    const adminListGroupsForUserParam = {
        UserPoolId,
        Username
    };
    // check whether user belongs to this tenant
    const adminListGroupsForUserResult = await client
        .adminListGroupsForUser(adminListGroupsForUserParam)
        .promise();
    return adminListGroupsForUserResult.Groups;
};

const deleteUser = async (Username, tenantId = null) => {
    // Tenant admin delete user
    if (tenantId) {
        try {
            // check whether user belongs to this tenant
            const userGroups = await getUserGroups(Username);
            if (!userGroups.find((group) => group.GroupName === tenantId)) {
                return PERMISSION_DENY;
            }
        } catch (err) {
            console.error(
                'getUser groups error, statusCode: ',
                err.statusCode,
                'error code: ',
                err.code,
                'Request Id: ',
                err.requestId
            );
            return responseErrorInfo(err);
        }
    }

    try {
        // check user group first before delete
        const adminDeleteUserParams = {
            UserPoolId,
            Username
        };
        await client.adminDeleteUser(adminDeleteUserParams).promise();
        return response(
            200,
            JSON.stringify({message: `user - ${Username} deleted`})
        );
    } catch (err) {
        console.error(`delete user - ${Username} failed with:`, err);
        console.error('RequestId: ' + err.requestId);
        return responseErrorInfo(err);
    }
};

exports.main = async (event) => {
    aws.config.logger = console;
    console.log('Received event:', JSON.stringify(event, null, 2));

    if (!event.path.startsWith(USERSAPI_PATH)) {
        return response(
            400,
            JSON.stringify({
                message: `Users API Error, invalid path - ${event.path}`
            })
        );
    }

    const method = event.httpMethod;
    const subPath = event.path.substring(USERSAPI_PATH.length).trim();
    // retrieve requester's group
    const requesterGroups = retrieveRequesterGroup(event.requestContext);

    let requesterTenantId = null;
    if (requesterGroups.includes(TENANTADMIN)) {
        const filteredGroups = requesterGroups.filter((group) => {
            return (
                group.trim() !== BENEFITADMIN && group.trim() !== TENANTADMIN
            );
        });

        console.log('filteredGroups', filteredGroups);

        if (filteredGroups.length > 0) {
            requesterTenantId = filteredGroups[0];
        }
    }

    if (method === 'GET' && (subPath === '' || subPath === '/')) {
        if (requesterGroups.includes(BENEFITADMIN)) {
            if (
                event.queryStringParameters &&
                event.queryStringParameters.tenantid
            ) {
                return getAllUsers(event.queryStringParameters.tenantid.trim());
            }
            return getAllUsers();
        }

        if (requesterGroups.includes(TENANTADMIN)) {
            if (requesterTenantId) {
                return getAllUsers(requesterTenantId);
            }
            return response(
                400,
                JSON.stringify({
                    message: "Didn't find tenantId on an tenant admin."
                })
            );
        }
        return PERMISSION_DENY;
    }

    const tempStr = subPath.startsWith('/') ? subPath.substring(1) : subPath;
    const username = tempStr.endsWith('/')
        ? tempStr.substring(0, tempStr.length - 1)
        : tempStr;

    if (
        requesterGroups.includes(BENEFITADMIN) ||
        (requesterGroups.includes(TENANTADMIN) && requesterTenantId)
    ) {
        if (method === 'GET') {
            // GET /user
            return getUser(username, requesterTenantId);
        }

        if (method === 'DELETE') {
            return deleteUser(username, requesterTenantId);
        }

        if (method === 'POST') {
            let payload = null;
            if (event.body) {
                try {
                    payload = JSON.parse(event.body);
                } catch (err) {
                    return INVAID_PARAMS;
                }
            }

            return createUser(username, requesterTenantId, payload);
        }
    }

    return PERMISSION_DENY;
};
